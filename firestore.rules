rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function canAccessList(listId) {
      return isAuthenticated() &&
             (get(/databases/$(database)/documents/lists/$(listId)).data.ownerId == request.auth.uid ||
              request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.collaborators);
    }

    // Users collection - authenticated users can read any user data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Lists collection
    match /lists/{listId} {
      // Read: only owner or collaborators. Use resource.data for the target document
      // to avoid reading the same document via get() during the permission evaluation.
      allow read: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.collaborators
      );

      // Create: any authenticated user
      allow create: if isAuthenticated();

     // Update/Delete: owner can update/delete; also allow an authenticated user to update the list
     // when the resulting document includes them in `collaborators` (accepting an invitation).
     // NOTE: this is a permissive allowance to fix the permission error when accepting invites.
     // Follow-up: we can tighten this to only allow changes to `collaborators` using more
     // precise checks (diff/changed keys) if desired.
     allow update, delete: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        request.auth.uid in resource.data.collaborators
      );
    }

    // List items collection
    match /lists/{listId}/items/{itemId} {
      // Read/Write: only owner or collaborators of the parent list
        allow read, write: if isAuthenticated() && (
          get(/databases/$(database)/documents/lists/$(listId)).data.ownerId == request.auth.uid
          || request.auth.uid in get(/databases/$(database)/documents/lists/$(listId)).data.collaborators
        );
    }

    // Invitations collection
    match /invitations/{invitationId} {
      // Read: any authenticated user
      allow read: if isAuthenticated();

      // Create: any authenticated user (will be validated in app logic)
      allow create: if isAuthenticated();

      // Update: only receiver can accept/reject
      allow update: if isAuthenticated() &&
                    get(/databases/$(database)/documents/invitations/$(invitationId)).data.toUserId == request.auth.uid;

      // Delete: sender or receiver
      allow delete: if isAuthenticated() &&
                    (get(/databases/$(database)/documents/invitations/$(invitationId)).data.fromUserId == request.auth.uid ||
                     get(/databases/$(database)/documents/invitations/$(invitationId)).data.toUserId == request.auth.uid);
    }
  }
}